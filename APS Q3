def f(x):
    return x**4 - 7*x**2 + x - 8

def bisseccao(a, b, eps):
    n = 0
    while abs(b - a) > eps:
        n += 1
        m = (a + b) / 2
        if f(m) == 0:
            return m, n
        elif f(m) * f(a) < 0:
            b = m
        else:
            a = m
    return (a + b) / 2, n

def quase_newton(x0, eps):
    n = 0
    while True:
        n += 1
        fx = f(x0)
        dfx = (f(x0 + eps) - fx) / eps
        x1 = x0 - fx / dfx
        if abs(x1 - x0) < eps:
            break
        x0 = x1
    return x1, n

# Definindo os parâmetros iniciais
a = -5
b = 5
eps = 1e-6
x0 = 0.0

# Aplicando o método da bissecção
raiz_bissec, n_bissec = bisseccao(a, b, eps)
print("Método da Bissecção:")
print("Raiz aproximada:", raiz_bissec)
print("Número de iterações:", n_bissec)

# Aplicando o método de quase-Newton
raiz_newton, n_newton = quase_newton(x0, eps)
print("Método de Quase-Newton:")
print("Raiz aproximada:", raiz_newton)
print("Número de iterações:", n_newton)

#Método da Bissecção:
Raiz aproximada: 1.7579345703125
Número de iterações: 23
Método de Quase-Newton:
Raiz aproximada: 1.7579328198304304
Número de iterações: 5
